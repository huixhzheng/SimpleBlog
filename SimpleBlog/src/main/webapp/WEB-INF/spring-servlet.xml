<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/mvc 
	http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<!-- The tag <context:component-scan>. This will allow Spring to load all 
		the components from package com.duell.spring3.controller and all its child 
		packages. This will load our HelloWorldController class. -->
	<context:component-scan base-package="com.duell" />


	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<!-- have defined a bean viewResolver. This bean will resolve the view 
			and add prefix string /WEB-INF/jsp/ and suffix .jsp to the view in ModelAndView. 
			Note that in our HelloWorldController class, we have return a ModelAndView 
			object with view name “hello”. This will be resolved to path /WEB-INF/jsp/hello.jsp. 
			commenting out this one in favour of the TilesView -->
		<!-- <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" 
			/> <property name="prefix" value="/WEB-INF/jsp/" /> <property name="suffix" 
			value=".jsp" /> -->

		<!-- using this viewClass configuration changes from just looking for a 
			configured class with a jsp extension e.x. ModelAndView("contact", "command", 
			new Contact()); would looks for the configuration for 'contact', previous 
			viewClass would look for contact.jsp New configuration uses the tilesConfigurer 
			below to match up 'contact' with the proper end point -->
		<property name="viewClass">
			<value>
				org.springframework.web.servlet.view.tiles2.TilesView
			</value>
		</property>
	</bean>

	<bean id="tilesConfigurer"
		class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
		<property name="definitions">
			<list>
				<value>/WEB-INF/tiles.xml</value>
			</list>
		</property>
	</bean>


	<!-- Start of Localization configurations -->

	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<!-- will look for files that start with messages. with the format messages_<lang 
			value>.properties ex messages_de.properties or messages_en.properties and 
			so on -->
		<property name="basename" value="classpath:messages" />
		<property name="defaultEncoding" value="UTF-8" />
	</bean>

	<!-- using this class to intercept changes to the Locale to it can be handled/saved 
		for future requests Defines the header parameter to look for to be 'lang' -->
	<bean id="localeChangeInterceptor"
		class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
		<property name="paramName" value="lang" />
	</bean>

	<!-- saves the locale settings in a cookie defaults to en -->
	<bean id="localeResolver"
		class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
		<property name="defaultLocale" value="en" />
	</bean>

	<!-- end of Localization configurations -->





	<!-- Theme related configurations -->
	<!-- like the localization files, this will look for the prefix theme- to 
		find a theme properties file -->
	<bean id="themeSource"
		class="org.springframework.ui.context.support.ResourceBundleThemeSource">
		<property name="basenamePrefix" value="theme-" />
	</bean>

	<!-- Theme Change Interceptor and Resolver definition -->
	<!-- Looks for the header parameter 'theme' and changes the CSS based upon 
		what is found -->
	<bean id="themeChangeInterceptor"
		class="org.springframework.web.servlet.theme.ThemeChangeInterceptor">
		<property name="paramName" value="theme" />
	</bean>
	<!-- saves theme settings into cookie -->
	<bean id="themeResolver"
		class="org.springframework.web.servlet.theme.CookieThemeResolver">
		<property name="defaultThemeName" value="default" />
	</bean>

	<!-- End of Theme related configurations -->

	<!-- JDBC Configuration -->

	<!-- propertyConfigurer bean – This bean is used to load database property 
		file jdbc.properties. The database connection details are stored in this 
		file which is used in hibernate connection settings. -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
		p:location="/WEB-INF/jdbc.properties" />

	<!-- dataSource bean – This is the java datasource used to connect to contact 
		manager database. We provide jdbc driver class, username, password etc in 
		configuration. -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close" p:driverClassName="${jdbc.driverClassName}"
		p:url="${jdbc.databaseurl}" p:username="${jdbc.username}" p:password="${jdbc.password}" />

	<!-- sessionFactory bean – This is Hibernate configuration where we define 
		different hibernate settings. hibernate.cfg.xml is set a config file which 
		contains entity class mappings -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation">
			<value>classpath:hibernate.cfg.xml</value>
		</property>
		<property name="configurationClass">
			<value>org.hibernate.cfg.AnnotationConfiguration</value>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${jdbc.dialect}</prop>
				<prop key="hibernate.show_sql">true</prop>
			</props>
		</property>
	</bean>

	<tx:annotation-driven />
	<!-- transactionManager bean – We use hibernate transaction manager to manage 
		the transactions of our contact manager application. -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- End of JDBC Items -->


	<!-- Runs the configured 'interceptors'. In this case: localeChangeInterceptor 
		themeChangeInterceptor (see how these interceptors are configured above) -->
	<bean id="handlerMapping"
		class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
		<property name="interceptors">
			<list>
				<ref bean="localeChangeInterceptor" />
				<ref bean="themeChangeInterceptor" />
			</list>

		</property>
	</bean>


	<aop:aspectj-autoproxy />
<!-- 	<bean id="bloggingServiceBean" class="com.duell.blogging.service.BloggingServiceMockImpl" /> -->
	<bean id="bloggingServiceBean" class="com.duell.blogging.service.BloggingServiceImpl" /> 


	<!-- Converter Beans -->

	<bean id="tagConverter"
		class="com.duell.blogging.view.converter.tagentry.SimpleUITagConverter" />


	<bean id="blogConverter"
		class="com.duell.blogging.view.converter.blogentry.SimpleUIBlogEntryConverter">
		<property name="commentConverter" ref="commentConverter" />
		<property name="tagConverter" ref="tagConverter" />
	</bean>
	<bean id="commentConverter"
		class="com.duell.blogging.view.converter.comment.SimpleCommentConverter" />

	<!-- Decorator beans -->
	<bean id="blogDecorator"
		class="com.duell.blogging.view.decorator.blogentry.ShortenDisplayContentDecorator">
		<property name="numChars" value="130" />
	</bean>
</beans>